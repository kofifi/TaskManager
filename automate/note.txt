My app is made in node.js it have files like
App.js
index.css
index.js
reportWebVitals.js
TaskAdd.js
TaskContext.js
TaskDelete.js
TaskDetails.js
TaskList.js

My App.js looks like this
```
import React, { useState } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import TasksList from './TaskList';
import TaskDetails from './TaskDetails';
import TaskAdd from './TaskAdd';

function App() {
    const [lastUpdate, setLastUpdate] = useState(0);
    const [searchQuery, setSearchQuery] = useState(''); // State for search query

    // Function to refresh the task list
    const refreshTasks = () => {
        setLastUpdate(Date.now());
    };

    const containerStyles = {
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        minHeight: '100vh', // Changed from height to minHeight
        textAlign: 'center',
        overflowY: 'auto', // Added to enable vertical scrolling
    };

    const searchBarStyles = {
        position: 'fixed',
        top: '10px',
        right: '10px',
        padding: '10px',
        width: '200px',
        borderRadius: '4px',
        border: '1px solid #434345',
        background: '#2d2d2f',
        color: 'white',
    };
    

    const headingStyles = {
        fontSize: '2rem', // Adjust the font size as needed
    };

    return (
        <Router>
            <input 
                type="text" 
                placeholder="Search tasks..." 
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                style={searchBarStyles}
            />
            <div style={containerStyles}>
                <h1 style={headingStyles}>Task Manager</h1>
                <TaskAdd onTaskAdded={refreshTasks} />
                <Routes>
                    <Route path="/" element={<TasksList lastUpdate={lastUpdate} searchQuery={searchQuery} />} />
                    <Route path="/task/:id" element={<TaskDetails />} />
                </Routes>
            </div>
        </Router>
    );
}

export default App;
```

My index.css looks like this
```
/* Define your root variables */

:root {
  --dark-bg: #1a1b1e;
  --light-text: #f4f4f4;
  --blue: #5a8dca;
  --dark-blue: #4a7dbb;
  --font-primary: 'Open Sans', sans-serif;
}

body {
  font-family: var(--font-primary);
  background-color: var(--dark-bg);
  color: var(--light-text);
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  align-items: center; /* Center horizontally */
  justify-content: center; /* Center vertically */
  min-height: 100vh;
  overflow-x: hidden; /* Prevent horizontal scrolling on small screens */
}

/* Style for h2 element */

h2 {
  text-align: center;
  color: var(--blue);
}

/* Style for the container */

.container {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  width: 100%;
  max-width: 800px;
}

/* Style for unordered list */

ul {
  list-style: none;
  padding: 0;
  width: 100%; /* Adjust width for responsiveness */
}

/* Style for list items */

li {
  background-color: #2d2d2f;
  margin: 10px 0;
  padding: 15px;
  padding-bottom: 20px; /* Add more padding at the bottom */
  width: 100;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  border-radius: 4px;
  border-left: 4px solid var(--blue);
  cursor: pointer;
}

/* Style for task title */

li .task-title {
  font-size: 18px;
  color: var(--light-text);
  margin-bottom: 8px;
  font-weight: bold;
  word-wrap: break-word; /* Ensure long words wrap */
}

/* Style for task description */

/* Style for task description */
li .task-description {
  font-size: 14px;
  color: #b0b0b0;
  word-wrap: break-word; /* Ensure long words wrap */
}


/* Style for forms */

form {
  margin-bottom: 20px;
  width: 100%; /* Adjust width for responsiveness */
}

/* Style for input elements */

input[type="text"] {
  padding: 10px;
  margin: 5px 0;
  border: 1px solid #434345;
  border-radius: 4px;
  width: 100%; /* Adjust width for responsiveness */
  background-color: #2d2d2f;
  color: var(--light-text);
}

/* Style for buttons */

button {
  background-color: var(--blue);
  color: white;
  padding: 10px 15px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  width: 100%; /* Adjust width for responsiveness */
  font-size: 16px;
  transition: background-color 0.3s;
}

button:hover {
  background-color: var(--dark-blue);
}

/* Style for task details */

.task-details, .back-button-container {
  background-color: #2d2d2f;
  margin: 20px auto;
  padding: 25px;
  width: 35vh;
  max-width: 500px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  border-radius: 6px;
  border-left: 5px solid var(--blue);
  color: var(--light-text);
  box-sizing: border-box; /* Ensure consistent box model */
  word-wrap: break-word; /* Ensure long words wrap */
}

.task-details p strong {
  display: block;
}

.task-details p span {
  display: block;
  margin-left: 20px; /* For indentation */
}

.task-details p .inline-title {
  display: inline; /* Overrides the block display for Title */
}


.task-details p, li {
  line-height: 1.6;
  margin-bottom: 10px;
}

.task-details strong {
  font-weight: bold;
}

.task-details ul {
    list-style-type: disc;
    padding-left: 20px;
}

.task-details a {
    color: #007bff;
    text-decoration: none;
}
.task-details a:hover {
    text-decoration: underline;
}
.back-button-container {
    padding: 10px 15px;
    background-color: #2d2d2f;
    color: white;

    border-radius: 5px;
    cursor: pointer;
}
.back-button-container:hover {
    background-color: var(--blue);
}

/* Reset default button styles */
button.back-button-container {
}


/* Additional styles for task details */

/* Media queries for responsiveness */


```

My index.js looks like this
```
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

```

My reportWebVitals.js looks like this
```
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

```

My TaskAdd.js looks like this
```
import React, { useState } from 'react';
import axios from 'axios';

function TaskAdd({ onTaskAdded }) {
    const [title, setTitle] = useState('');
    const [description, setDescription] = useState('');
    const [showModal, setShowModal] = useState(false);

    const handleSubmit = (event) => {
        event.preventDefault();
        axios.post('http://localhost:3001/api/tasks', { title, description })
            .then(response => {
                // Handle the response
                console.log(response.data);
                setShowModal(false); // Close the modal on success
                // Reset form fields after successful submission
                setTitle('');
                setDescription('');
                // Call the callback function to trigger task list refresh
                if (onTaskAdded) {
                    onTaskAdded();
                }
            })
            .catch(error => {
                console.error('Error adding task:', error);
            });
    };
    
    return (
        <>
            <button
                style={{
                    position: 'fixed',
                    bottom: '10px',
                    right: '10px',
                    width: '64px',
                    height: '64px',
                    borderRadius: '100%',
                    background: '#4a90e2', // Lighter blue for button in dark mode
                    color: 'white',
                    fontSize: '16px',
                    border: 'none',
                    cursor: 'pointer',
                    zIndex: 1000,
                    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)', // Shadow for depth
                    transition: 'transform 0.1s ease, box-shadow 0.1s ease', // Smooth transition for button press and hover
                }}
                onClick={() => setShowModal(true)}
                onMouseDown={(e) => e.currentTarget.style.transform = 'translateY(2px)'} // Button press effect
                onMouseUp={(e) => e.currentTarget.style.transform = 'translateY(0)'}
                onMouseOut={(e) => {
                    e.currentTarget.style.transform = 'translateY(0)'; // Resetting button state on mouse out
                    e.currentTarget.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)'; // Resetting shadow on mouse out
                }}
                onMouseOver={(e) => e.currentTarget.style.boxShadow = '0 6px 12px rgba(0, 0, 0, 0.3)'} // Shadow effect on hover
            >
                Add
            </button>

            {showModal && (
                <div style={{
                    position: 'fixed',
                    top: 0,
                    left: 0,
                    width: '100vw',
                    height: '100vh',
                    background: 'rgba(0, 0, 0, 0.5)',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    zIndex: 1000,
                }}>
                    <div style={{
                        background: '#2c2c2e', // Dark background for modal
                        padding: '20px',
                        borderRadius: '5px',
                        boxShadow: '0 4px 8px rgba(255, 255, 255, 0.05)', // Subtle shadow for depth
                        color: '#d1d1d1', // Light text color for details
                    }}>
                        <form onSubmit={handleSubmit} style={{ maxWidth: '300px', padding: '10px' }}>
                            <div style={{ marginBottom: '10px' }}>
                                
                                <input
                                    type="text"
                                    placeholder="Enter title"
                                    value={title}
                                    onChange={e => setTitle(e.target.value)}
                                    style={{
                                        padding: '10px',
                                        border: '1px solid #333',
                                        borderRadius: '4px',
                                        width: '280px', // Full width within modal
                                        background: 'white', // Dark background for inputs
                                        color: 'black', // Light text color for inputs
                                    }}
                                />
                            </div>
                            <div style={{ marginBottom: '10px' }}>
                                
                                <input
                                    type="text"
                                    placeholder="Enter description"
                                    value={description}
                                    onChange={e => setDescription(e.target.value)}
                                    style={{
                                        padding: '10px',
                                        border: '1px solid #333',
                                        borderRadius: '4px',
                                        width: '280px', // Full width within modal
                                        background: 'white', // Dark background for inputs
                                        color: 'black', // Light text color for inputs
                                    }}
                                />
                            </div>
                            <div>
                                <button
                                    type="submit"
                                    style={{
                                        background: '#4a90e2',
                                        color: 'white',
                                        padding: '10px 15px',
                                        border: 'none',
                                        borderRadius: '4px',
                                        marginRight: '5px',
                                        marginTop: '15px',
                                    }}
                                >
                                    Submit Task
                                </button>
                                <button
                                    type="button"
                                    onClick={() => setShowModal(false)}
                                    style={{
                                        background: '#686868',
                                        color: 'white',
                                        padding: '10px 15px',
                                        border: 'none',
                                        borderRadius: '4px',
                                        marginTop: '15px',
                                    }}
                                >
                                    Cancel
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}
        </>
    );
}

export default TaskAdd;

```

My TaskContext.js looks like this
```

```

My TaskDelete.js looks like this
```
import axios from 'axios';

export const TaskDelete = (taskId) => {
  return axios.delete(`http://localhost:3001/api/tasks/${taskId}`)
    .then(() => {
      return true;
    })
    .catch(error => {
      console.error('Error deleting task:', error);
      return false;
    });
};

export default TaskDelete;
```

My TaskDetails.js looks like this
```
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useParams, useNavigate } from 'react-router-dom';

function TaskDetails() {
    const [task, setTask] = useState(null);
    const [completed, setCompleted] = useState(false);
    const { id } = useParams();
    const navigate = useNavigate();

    useEffect(() => {
        axios.get(`http://localhost:3001/api/tasks/${id}`)
            .then(response => {
                const formattedTask = {
                    ...response.data,
                    creationDate: formatDateTime(response.data.creationDate),
                    lastUpdated: formatDateTime(response.data.lastUpdated),
                };
                setTask(formattedTask);
                setCompleted(formattedTask.completed);
            })
            .catch(error => console.error('Error fetching task:', error));
    }, [id]);

    const formatDateTime = (isoDate) => {
        const date = new Date(isoDate);
        return date.toLocaleString();
    };

    const updateCompletionStatus = () => {
        axios.put(`http://localhost:3001/api/tasks/${id}`, { completed: !completed })
            .then(response => {
                setCompleted(response.data.completed);
            })
            .catch(error => console.error('Error updating task status:', error));
    };

    const goBack = () => {
        navigate(-1);
    };

    if (!task) return <div>Loading...</div>;

    return (
        <>
            <div className="task-details" style={{textAlign:'left'}}>
                <h2>Task Details</h2>
                {task.title && <p><strong className="inline-title">Title:</strong> {task.title}</p>} {/* Special class for Title */}
                {task.description && <p><strong>Description:</strong> {task.description}</p>}
                {task.dueDate && <p><strong>Due Date:</strong> {task.dueDate}</p>}
                {task.priority && <p><strong>Priority:</strong> {task.priority}</p>}
                {task.labels && <p><strong>Labels:</strong> {task.labels.join(', ')}</p>}
                {task.assignedTo && <p><strong>Assigned To:</strong> {task.assignedTo.join(', ')}</p>}
                <p><strong>Creation Date:</strong> {task.creationDate}</p>
                <p><strong>Last Updated:</strong> {task.lastUpdated}</p>
                {task.status && <p><strong>Status:</strong> {task.status}</p>}
                <p>
                    <strong  className="inline-title">Completed:</strong>
                    <input
                        type="checkbox"
                        checked={completed}
                        onChange={updateCompletionStatus}
                    />
                </p>
                {task.subtasks && task.subtasks.length > 0 && (
                    <>
                        <h3>Subtasks</h3>
                        <ul>
                            {task.subtasks.map(subtask => (
                                <li key={subtask.id}>{subtask.title} - {subtask.completed ? 'Completed' : 'Incomplete'}</li>
                            ))}
                        </ul>
                    </>
                )}
                {task.attachments && task.attachments.length > 0 && (
                    <>
                        <h3>Attachments</h3>
                        <ul>
                            {task.attachments.map((attachment, index) => (
                                <li key={index}><a href={attachment} target="_blank" rel="noreferrer">{attachment}</a></li>
                            ))}
                        </ul>
                    </>
                )}
                {task.comments && task.comments.length > 0 && (
                    <>
                        <h3>Comments</h3>
                        <ul>
                            {task.comments.map((comment, index) => (
                                <li key={index}>{comment.user}: {comment.comment} on {comment.date}</li>
                            ))}
                        </ul>
                    </>
                )}
            </div>

            {/* Osobny kontener dla przycisku Powrót */}
            <button onClick={goBack} className="back-button-container">←</button>

        </>
    );
}

export default TaskDetails;

```

My TaskList.js looks like this
```
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const TaskList = ({ lastUpdate, searchQuery, onTaskDeleted }) => { // Use searchQuery as a prop
  const [tasks, setTasks] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    fetchTasks();
  }, [lastUpdate, searchQuery]); // Dependency array includes searchQuery

  const fetchTasks = () => {
    axios.get('http://localhost:3001/api/tasks')
      .then((response) => {
        let filteredTasks = response.data;

        // Filter tasks based on the searchQuery prop
        if (searchQuery) {
          filteredTasks = filteredTasks.filter(task => 
            task.title.toLowerCase().includes(searchQuery.toLowerCase()) || 
            task.description.toLowerCase().includes(searchQuery.toLowerCase())
          );
        }

        setTasks(filteredTasks);
      })
      .catch((error) => console.error('Error fetching tasks:', error));
  };

  const handleTaskClick = (id) => {
    navigate(`/task/${id}`);
  };

  // Function to delete a task
  const deleteTask = (id) => {
    axios
      .delete(`http://localhost:3001/api/tasks/${id}`)
      .then(() => {
        // Refresh tasks list after deletion
        fetchTasks();
        // If you want to trigger any other actions upon task deletion, you can call onTaskDeleted() here
        if (onTaskDeleted) {
          onTaskDeleted();
        }
      })
      .catch((error) => console.error('Error deleting task:', error));
  };

  const taskStyles = {
    cursor: 'pointer',
    marginBottom: '10px',
    border: '2px solid #333',
    padding: '20px',
    width: '40vh', // Default width for mobile view
    borderRadius: '8px',
    transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',
    backgroundColor: '#2d2d2f',
    color: '#f4f4f4',
  };

  const tabletMediaQuery = '@media screen and (minWidth: 768px) and (maxWidth: 1023px)';
  const desktopMediaQuery = '@media screen and (minWidth: 1024px)';
  

  taskStyles[tabletMediaQuery] = {
    width: '35vh', // Width for tablet view
  };

  taskStyles[desktopMediaQuery] = {
    width: '35vh', // Width for desktop view
  };

  const containerStyles = {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
  };

  const buttonStyles = {
    background: 'var(--blue)',
    color: 'white',
    padding: '10px 15px',
    border: 'none',
    borderRadius: '4px',
    marginTop: '10px',
    cursor: 'pointer',
    transition: 'background-color 0.3s',
  };

  buttonStyles[':hover'] = {
    background: 'var(--dark-blue)',
  };

  return (
    <div style={containerStyles}>
      <ul>
        {tasks.map((task) => (
          <li
            key={task.id}
            onClick={() => handleTaskClick(task.id)}
            style={taskStyles}
          >
            <div className="task-title">{task.title}</div>
            <div className="task-description">{task.description}</div>
            <button
              style={buttonStyles}
              onClick={(e) => {
                e.stopPropagation();
                deleteTask(task.id);
              }}
            >
              Delete
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default TaskList;

```
